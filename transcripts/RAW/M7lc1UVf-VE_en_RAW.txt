JEFF POSNICK: Hey, everybody. (Start: 10.349s, Duration: 1.0s) 
Welcome to this week's show of
YouTube Developers Live. (Start: 11.349s, Duration: 2.681s) 
I'm Jeff Posnick coming to
you from New York City. (Start: 14.03s, Duration: 2.15s) 
I'm a member of the Developer
Relations team. (Start: 16.18s, Duration: 3.24s) 
And this week I'm really excited
to talk to you about (Start: 19.42s, Duration: 2.07s) 
different ways of customizing
the YouTube-embedded player. (Start: 21.49s, Duration: 3.05s) 
Before I get started though, I
want a couple of ground rules (Start: 24.54s, Duration: 3.489s) 
to just talk about what we're
going to be covering in (Start: 28.029s, Duration: 3.51s) 
today's show. (Start: 31.539s, Duration: 1.0s) 
There are a lot of different
embedded players, and there's (Start: 32.539s, Duration: 1.86s) 
lots of ways to customize
them. (Start: 34.399s, Duration: 2.401s) 
But for this particular show,
we're going to be focusing on (Start: 36.8s, Duration: 3.12s) 
customizing be iframe-embedded
player, which is our current (Start: 39.92s, Duration: 5.25s) 
recommended way of embedding
videos on web pages. (Start: 45.17s, Duration: 3.529s) 
And we're going to specifically
focus on the (Start: 48.699s, Duration: 1.52s) 
options that are most relevant
for desktop web browsers. (Start: 50.219s, Duration: 4.68s) 
A lot of these customization
options we'll talk about do (Start: 54.899s, Duration: 3.271s) 
have some effect with mobile
browser playback, but not all (Start: 58.17s, Duration: 3.989s) 
of them do. (Start: 62.159s, Duration: 1.0s) 
And we're going to just focus
today on how these options (Start: 63.159s, Duration: 3.341s) 
affect desktop playback. (Start: 66.5s, Duration: 2.1s) 
Another thing that we're not
going to be covering today is (Start: 68.6s, Duration: 2.28s) 
using the JavaScript API for
controlling playback. (Start: 70.88s, Duration: 4.22s) 
This is obviously a very
interesting topic and a very (Start: 75.1s, Duration: 1.74s) 
important topic, it's just a
little bit outside the scope (Start: 76.84s, Duration: 1.92s) 
of what we wanted
to talk about. (Start: 78.76s, Duration: 1.77s) 
So we're not going to be
covering any of the methods (Start: 80.53s, Duration: 2.61s) 
that you could use in JavaScript
to start playback (Start: 83.14s, Duration: 2.14s) 
or control playback, or receive
events when playback (Start: 85.28s, Duration: 4.09s) 
changes happen in the player. (Start: 89.37s, Duration: 1.91s) 
What we are going to be covering
is things that are (Start: 91.28s, Duration: 2.549s) 
covered in the documentation
on the specific page, so if (Start: 93.829s, Duration: 4.21s) 
you pull that up, we'll
share that with you. (Start: 98.039s, Duration: 3.281s) 
And as I'm going through this
demo, a lot of what I'm going (Start: 101.32s, Duration: 3.439s) 
to be covering refers to
specific web pages. (Start: 104.759s, Duration: 2.5s) 
When we go back and post this
video on YouTube, I'll have (Start: 107.259s, Duration: 2.991s) 
annotations linking to all the
web pages, so that you could (Start: 110.25s, Duration: 2.369s) 
go there and check them
out yourself. (Start: 112.619s, Duration: 4.331s) 
So this is our main jumping off
point for talking about (Start: 116.95s, Duration: 3.959s) 
the customization that
you could do to the (Start: 120.909s, Duration: 2.151s) 
YouTube-embedded
iframe player. (Start: 123.06s, Duration: 3.53s) 
And you could get here from
our main Developers.Googl (Start: 126.59s, Duration: 3.32s) 
e.com/YouTubedocumentation. (Start: 129.91s, Duration: 3.17s) 
And everything in this parameter
section in the docks (Start: 133.08s, Duration: 4.391s) 
is fair game for what we're
going to talk about now. (Start: 137.471s, Duration: 3.489s) 
One other thing before I
actually get into explaining (Start: 140.96s, Duration: 3.37s) 
these parameters is explain
the two different types of (Start: 144.33s, Duration: 2.42s) 
ways that you can load the
iframe-embedded player onto (Start: 146.75s, Duration: 4.26s) 
your web page. (Start: 151.01s, Duration: 1.78s) 
And we're kind of agnostic as
to the way in which you load (Start: 152.79s, Duration: 2.79s) 
it, these parameters are going
to behave the same way (Start: 155.58s, Duration: 1.83s) 
regardless. (Start: 157.41s, Duration: 1.0s) 
But I just wanted to point out
that there are two different (Start: 158.41s, Duration: 1.98s) 
ways of doing it. (Start: 160.39s, Duration: 2.13s) 
The first way is using the
iframes kind of like YouTube (Start: 162.52s, Duration: 5.56s) 
player, YT. (Start: 168.08s, Duration: 1.64s) 
Player constructor. (Start: 169.72s, Duration: 1.0s) 
And this is a more programmatic
way of loading (Start: 170.72s, Duration: 2.5s) 
the iframe player onto
your web page. (Start: 173.22s, Duration: 1.71s) 
So I have this jsFiddle right
here that demonstrates what (Start: 174.93s, Duration: 3.12s) 
that will look like. (Start: 178.05s, Duration: 1.74s) 
It basically involves loading
in this JavaScript API and (Start: 179.79s, Duration: 4.19s) 
calling the YT. (Start: 183.98s, Duration: 1.1s) 
Player constructor, and passing
in the ID of a div (Start: 185.08s, Duration: 3.06s) 
that's on your page. (Start: 188.14s, Duration: 2.35s) 
And you'll see here that there
is this playerVars section (Start: 190.49s, Duration: 3.11s) 
that you could pass
in to the YT. (Start: 193.6s, Duration: 1.89s) 
Player constructors. (Start: 195.49s, Duration: 1.0s) 
So this is where you get to
specify all the options that (Start: 196.49s, Duration: 2.99s) 
we're going to be covering today
if you're using the YT. (Start: 199.48s, Duration: 2.17s) 
PLayer constructor. (Start: 201.65s, Duration: 1.51s) 
And just quickly jumping over
here, this is where I stole (Start: 203.16s, Duration: 3.91s) 
that code from in our Getting
Started guide (Start: 207.07s, Duration: 3.15s) 
for the iframe API. (Start: 210.22s, Duration: 2.55s) 
We talk about how you could
actually get that code. (Start: 212.77s, Duration: 4.16s) 
So feel free to borrow it there
or from that jsFiddle. (Start: 216.93s, Duration: 3.27s) 
The second way that you load
the iframe player onto your (Start: 220.2s, Duration: 1.75s) 
page is just with a simple
iframe tag that you could add (Start: 221.95s, Duration: 3.42s) 
to any web page. (Start: 225.37s, Duration: 2.37s) 
And this has the same sort of
parameters that the YT. (Start: 227.74s, Duration: 2.84s) 
Player constructor is,
kind under the hood. (Start: 230.58s, Duration: 1.69s) 
They really end up creating
the same thing. (Start: 232.27s, Duration: 2.48s) 
Just that the YT. (Start: 234.75s, Duration: 1.0s) 
Player constructor is a
programmatic way of creating (Start: 235.75s, Duration: 3.05s) 
this tag using JavaScript. (Start: 238.8s, Duration: 2.04s) 
This is if you're just writing
out [? initiable ?] (Start: 240.84s, Duration: 2.02s) 
template, or even if you're not
a JavaScript programmer at (Start: 242.86s, Duration: 3.2s) 
all and just want to include
some HTML on your page, you (Start: 246.06s, Duration: 3.65s) 
could use this tag. (Start: 249.71s, Duration: 2.72s) 
And the same parameters we are
going to be talking about can (Start: 252.43s, Duration: 3.16s) 
go at the very end of the URL
that you use as a source of (Start: 255.59s, Duration: 3.75s) 
the iframe tag. (Start: 259.34s, Duration: 1.079s) 
So over here we have autoplay
equals 0 and (Start: 260.419s, Duration: 2.761s) 
controls equals 0. (Start: 263.18s, Duration: 1.959s) 
And that corresponds to what
we're seeing over here for the (Start: 265.139s, Duration: 4.671s) 
playerVars. (Start: 269.81s, Duration: 1.0s) 
And the actual documentation for
using that iframe tag is (Start: 270.81s, Duration: 5.33s) 
found over here. (Start: 276.14s, Duration: 2.11s) 
If you look in the docs over
here, we give some examples. (Start: 278.25s, Duration: 5.87s) 
So that's the ground rules for
how you actually will use (Start: 284.12s, Duration: 3.81s) 
these parameters that
we are going to be (Start: 287.93s, Duration: 1.171s) 
describing in your own code. (Start: 289.101s, Duration: 3.119s) 
So I just wanted to run through
pretty much from the (Start: 292.22s, Duration: 2.68s) 
top, all these parameters
here. (Start: 294.9s, Duration: 2.07s) 
We do have really nice
explanations what they mean in (Start: 296.97s, Duration: 3.69s) 
the documentation. (Start: 300.66s, Duration: 1.03s) 
So it's going to be a little bit
repetitive in some cases. (Start: 301.69s, Duration: 4.22s) 
But I did want to highlight some
specific ones that are (Start: 305.91s, Duration: 2.64s) 
the most useful. (Start: 308.55s, Duration: 1.03s) 
So autohide comes in
handy quite a bit. (Start: 309.58s, Duration: 4.18s) 
This is something that controls
the behavior of the (Start: 313.76s, Duration: 4.2s) 
controls, more or less, that
are on the bottom of the (Start: 317.96s, Duration: 3.441s) 
YouTube Player. (Start: 321.401s, Duration: 1.539s) 
It's not necessarily the initial
state of the controls, (Start: 322.94s, Duration: 3.53s) 
but it's more like what happens
the controls once (Start: 326.47s, Duration: 2.13s) 
playback starts. (Start: 328.6s, Duration: 2.19s) 
And I'm going to demonstrate
the ways of setting those (Start: 330.79s, Duration: 3.04s) 
different values by going to
this page over here, which is (Start: 333.83s, Duration: 3.85s) 
our YouTube player demo. (Start: 337.68s, Duration: 1.98s) 
So this is another really
great resource. (Start: 339.66s, Duration: 3.01s) 
And it's an alternative to
writing this code over here or (Start: 342.67s, Duration: 4.66s) 
writing this in jsFiddle. (Start: 347.33s, Duration: 1.0s) 
It's just a way to play around
with these parameters in a (Start: 348.33s, Duration: 3.48s) 
live setting. (Start: 351.81s, Duration: 2.6s) 
And we can think of it like our
API explorer, if you've (Start: 354.41s, Duration: 2.8s) 
ever used that for
our data APIs. (Start: 357.21s, Duration: 3.34s) 
This is the equivalent
for our player APIs. (Start: 360.55s, Duration: 3.35s) 
So what it lets you do is go
over here on the right and (Start: 363.9s, Duration: 3.07s) 
start choosing different values
for the parameters. (Start: 366.97s, Duration: 2.74s) 
And I'm not going to do this
for every single parameter (Start: 369.71s, Duration: 1.86s) 
that we didn't talk about, but
just to show you how you could (Start: 371.57s, Duration: 3.43s) 
experiment in real time
without having (Start: 375.0s, Duration: 1.91s) 
to write any code. (Start: 376.91s, Duration: 1.32s) 
Let me just try setting autohide
to 0 over here. (Start: 378.23s, Duration: 3.01s) 
I'm going to click
Update Player. (Start: 381.24s, Duration: 2.81s) 
And once I set it,
Begin Playback. (Start: 384.05s, Duration: 4.67s) 
This is a very old video. (Start: 388.72s, Duration: 2.44s) 
Actually, part of what I plan
on doing is replacing the (Start: 391.16s, Duration: 2.92s) 
default video that we use in
this demo with this video, so (Start: 394.08s, Duration: 3.15s) 
we'll have a very meta
experience, if you happen to (Start: 397.23s, Duration: 2.45s) 
be watching this while on the
demo page trying out these (Start: 399.68s, Duration: 2.82s) 
parameters. (Start: 402.5s, Duration: 1.61s) 
So the main thing to keep in
mind though is that the (Start: 404.11s, Duration: 2.92s) 
controls at the bottom
over here did not (Start: 407.03s, Duration: 1.53s) 
disappear during playback. (Start: 408.56s, Duration: 2.64s) 
And if I were to go over here
and change the autohide to 1, (Start: 411.2s, Duration: 5.45s) 
Update Player-- (Start: 416.65s, Duration: 1.05s) 
it says, loading in the player
with the parameters-- (Start: 417.7s, Duration: 5.39s) 
you'll see that when I mouse
over, the controls are there. (Start: 423.09s, Duration: 2.78s) 
When I move the mouse away,
the controls disappear. (Start: 425.87s, Duration: 2.25s) 
So for experiences where you
want maybe a more of lean-back (Start: 428.12s, Duration: 5.03s) 
type of situation, where people
aren't going to be (Start: 433.15s, Duration: 2.28s) 
interacting with the controls,
or you don't want the controls (Start: 435.43s, Duration: 1.88s) 
to overlay the video playback,
it's a very useful parameter. (Start: 437.31s, Duration: 4.4s) 
Autoplay is next on the
list alphabetically. (Start: 441.71s, Duration: 3.322s) 
Somewhat self-explanatory, if
you add in the autoplay (Start: 445.032s, Duration: 2.328s) 
parameter, then the video will
start playing back as soon as (Start: 447.36s, Duration: 4.059s) 
the iframe embed is loaded
on the page. (Start: 451.419s, Duration: 3.351s) 
I'll give a quick demo
of that over here. (Start: 454.77s, Duration: 3.42s) 
And this time, instead of using
the player demo page, (Start: 458.19s, Duration: 5.29s) 
I'm going to use that jsFiddle
that we have set up. (Start: 463.48s, Duration: 2.82s) 
And I'm going to just change
the autoplay value to 1. (Start: 466.3s, Duration: 2.13s) 
I'm going to click Run. (Start: 468.43s, Duration: 1.94s) 
And you could see,
here's the embed. (Start: 470.37s, Duration: 2.32s) 
It started playing as soon
as the page loads. (Start: 472.69s, Duration: 3.12s) 
So there are certain scenarios
where that's useful, certain (Start: 475.81s, Duration: 1.96s) 
scenarios where it's not. (Start: 477.77s, Duration: 1.22s) 
You have to use your judgment
as to whether autoplaying is (Start: 478.99s, Duration: 3.53s) 
the right thing to do. (Start: 482.52s, Duration: 2.39s) 
cc_load_policy is something that
controls whether closed (Start: 484.91s, Duration: 4.12s) 
captions or subtitles are
displayed by default. (Start: 489.03s, Duration: 4.5s) 
And the default behavior--
we don't set anything for (Start: 493.53s, Duration: 3.77s) 
cc_load_policy-- (Start: 497.3s, Duration: 1.0s) 
is that the user's preferences
[? basic ?] on YouTube. (Start: 498.3s, Duration: 2.88s) 
There is a way of going in and
saying whether you want closed (Start: 501.18s, Duration: 2.209s) 
captions or you don't want
closed captions. (Start: 503.389s, Duration: 2.671s) 
That's normally what
takes effect. (Start: 506.06s, Duration: 1.21s) 
If you have a specific video and
you know that you always (Start: 507.27s, Duration: 2.11s) 
want the closed captions to
be shown, you could set (Start: 509.38s, Duration: 2.48s) 
cc_load_policy to 1. (Start: 511.86s, Duration: 2.51s) 
Color's a bit interesting. (Start: 514.37s, Duration: 2.229s) 
It's not something that I see
widely used and necessarily, (Start: 516.599s, Duration: 4.42s) 
but there are some cases where
you might want a little bit of (Start: 521.019s, Duration: 3.01s) 
flair, let's say,
in your player. (Start: 524.029s, Duration: 1.641s) 
And you don't want the
default behavior. (Start: 525.67s, Duration: 2.38s) 
So I'm going to go to the
player demo page really (Start: 528.05s, Duration: 5.039s) 
quickly and just show
you what it does. (Start: 533.089s, Duration: 1.91s) 
You could set color to white
instead of red, and you update (Start: 534.999s, Duration: 7.78s) 
the player. (Start: 542.779s, Duration: 2.281s) 
Controls should look slightly
different depending upon (Start: 545.06s, Duration: 1.93s) 
whether they're red or white. (Start: 546.99s, Duration: 1.92s) 
So it just basically changes the
branding a little bit on (Start: 548.91s, Duration: 2.919s) 
the player. (Start: 551.829s, Duration: 1.99s) 
Not necessarily the most useful
thing in the world, but (Start: 553.819s, Duration: 1.842s) 
it does give you a little
bit more control. (Start: 555.661s, Duration: 3.059s) 
Speaking of control, next item
alphabetically is controls. (Start: 558.72s, Duration: 3.729s) 
And this is actually
quite useful. (Start: 562.449s, Duration: 2.161s) 
There are cases where you can
actually see a lot of (Start: 564.61s, Duration: 4.69s) 
performance benefits by changing
this value from the (Start: 569.3s, Duration: 3.86s) 
defaults to a specific
option, which is 2. (Start: 573.16s, Duration: 4.919s) 
We have a note in the
documentation explaining more (Start: 578.079s, Duration: 2.161s) 
about what this does. (Start: 580.24s, Duration: 2.23s) 
And if you read the note, it
says that controls=2 can give (Start: 582.47s, Duration: 3.039s) 
you a performance improvement
over the default behavior. (Start: 585.509s, Duration: 3.911s) 
And the reason why that is is
controls=2 has a way of (Start: 589.42s, Duration: 3.979s) 
loading the iframe embedded
player that does not (Start: 593.399s, Duration: 2.461s) 
initialize the underlying
Flash player by default. (Start: 595.86s, Duration: 5.11s) 
It doesn't initialize it until
you actually click on the (Start: 600.97s, Duration: 3.849s) 
video thumbnail to start
the playback. (Start: 604.819s, Duration: 2.861s) 
This obviously only applies to
playbacks that do involve the (Start: 607.68s, Duration: 4.509s) 
Flash player. (Start: 612.189s, Duration: 1.481s) 
The iframe player might decide
that HTML5 video is going to (Start: 613.67s, Duration: 2.89s) 
be used instead, in which case
this isn't quite as important. (Start: 616.56s, Duration: 2.92s) 
But in situations where Flash
playback is being used, you (Start: 619.48s, Duration: 2.31s) 
could really see a significant
performance benefit from (Start: 621.79s, Duration: 3.07s) 
setting controls=2. (Start: 624.86s, Duration: 1.7s) 
And that might be the default
that we use at some point in (Start: 626.56s, Duration: 3.38s) 
the future, as mentioned here,
as soon as some UI issues are (Start: 629.94s, Duration: 3.199s) 
worked out. (Start: 633.139s, Duration: 1.0s) 
And I'm going to give you an
example of how you could see (Start: 634.139s, Duration: 3.25s) 
that performance benefit. (Start: 637.389s, Duration: 2.221s) 
It mainly comes across
when you have-- (Start: 639.61s, Duration: 2.069s) 
let's say, I don't want to say
a specific number, but if you (Start: 641.679s, Duration: 2.671s) 
have multiple iframe embeds
on the same page. (Start: 644.35s, Duration: 1.89s) 
So this one over here has-- (Start: 646.24s, Duration: 2.689s) 
I think there might be 50 from
the Google Developers channel. (Start: 648.929s, Duration: 3.32s) 
So the first thing that we're
going to look at is behavior (Start: 652.249s, Duration: 3.76s) 
pretty much by default, where
there's controls=1 or if you (Start: 656.009s, Duration: 4.291s) 
leave out controls. (Start: 660.3s, Duration: 1.289s) 
It's the default. (Start: 661.589s, Duration: 1.021s) 
And it can take some time for
these underlying Flash players (Start: 662.61s, Duration: 5.919s) 
to all initialize, and can add
some latency to the point (Start: 668.529s, Duration: 4.35s) 
where things look like
they're ready to be (Start: 672.879s, Duration: 2.63s) 
interacted with on the page. (Start: 675.509s, Duration: 1.791s) 
So not necessarily the
best user experience. (Start: 677.3s, Duration: 3.25s) 
If you take the same thing and
you change it to controls (Start: 680.55s, Duration: 2.079s) 
equals 2 explicitly, then you
should see a much better (Start: 682.629s, Duration: 3.68s) 
performance. (Start: 686.309s, Duration: 1.241s) 
It's quite remarkable,
actually. (Start: 687.55s, Duration: 3.209s) 
So what's going on? (Start: 690.759s, Duration: 1.0s) 
[? You can see ?] now again,
it's just loading in these (Start: 691.759s, Duration: 1.921s) 
thumbnails. (Start: 693.68s, Duration: 1.0s) 
It's not initializing the Flash
player for each video. (Start: 694.68s, Duration: 3.509s) 
And you could have-- (Start: 698.189s, Duration: 2.71s) 
I don't want to say you should
put thousands of embeds on the (Start: 700.899s, Duration: 1.97s) 
same page-- but if you do happen
to have a large number (Start: 702.869s, Duration: 2.82s) 
of embeds on the page, you
will see a difference. (Start: 705.689s, Duration: 3.83s) 
So very important to
keep that in mind. (Start: 709.519s, Duration: 1.391s) 
A few other parameters
that are not (Start: 710.91s, Duration: 2.81s) 
necessarily as exciting. (Start: 713.72s, Duration: 2.2s) 
There's keyboard support for
the ActionScript player. (Start: 715.92s, Duration: 4.94s) 
I'm not really sure why you
would want to turn this off. (Start: 720.86s, Duration: 2.259s) 
I think it's actually kind of
nice to keep it on, but we do (Start: 723.119s, Duration: 2.111s) 
have the option of turning
it off if you want. (Start: 725.23s, Duration: 4.139s) 
This particular parameter
is quite important, the (Start: 729.369s, Duration: 3.801s) 
enablejsapi. (Start: 733.17s, Duration: 1.289s) 
And what it'll let you do is
ensure that you are able to (Start: 734.459s, Duration: 3.93s) 
talk to the iframe player
on the page using (Start: 738.389s, Duration: 2.86s) 
the JavaScript API. (Start: 741.249s, Duration: 1.051s) 
So as I mentioned, we're not
actually going to be covering (Start: 742.3s, Duration: 3.409s) 
anything about the JavaScript
API in this particular (Start: 745.709s, Duration: 2.82s) 
session, but plenty of
people have used it. (Start: 748.529s, Duration: 3.18s) 
And the one case where you
really need to be sure you're (Start: 751.709s, Duration: 2.471s) 
explicitly setting this is when
you're writing the iframe (Start: 754.18s, Duration: 3.159s) 
tag directly to the page. (Start: 757.339s, Duration: 4.521s) 
So kind of like this. (Start: 761.86s, Duration: 3.509s) 
Because when you're
using the YT. (Start: 765.369s, Duration: 1.34s) 
Player constructor, it pretty
much will be set automatically (Start: 766.709s, Duration: 3.56s) 
for you by default. (Start: 770.269s, Duration: 2.67s) 
Just because by virtue of the
fact that you're using (Start: 772.939s, Duration: 1.64s) 
JavaScript to initialize the
player, chances are you are (Start: 774.579s, Duration: 2.421s) 
going to want to talk to the
player with JavaScript. (Start: 777.0s, Duration: 2.24s) 
So it always gets set for you. (Start: 779.24s, Duration: 1.12s) 
But that's not the case if you
explicitly are writing an (Start: 780.36s, Duration: 2.68s) 
iframe tag to a page. (Start: 783.04s, Duration: 1.729s) 
So you really do need to make
sure there that you have (Start: 784.769s, Duration: 2.131s) 
enabled jsapi set to 1. (Start: 786.9s, Duration: 3.689s) 
And that's necessary in order to
talk to the iframe player. (Start: 790.589s, Duration: 6.851s) 
The end tag, and a little
bit further down (Start: 797.44s, Duration: 2.679s) 
the alphabet is start. (Start: 800.119s, Duration: 1.981s) 
So these are two corresponding
tags. (Start: 802.1s, Duration: 2.359s) 
This gives you a really easy way
of putting an embed on a (Start: 804.459s, Duration: 2.57s) 
page that has its custom end
time and a custom start time. (Start: 807.029s, Duration: 4.24s) 
So if you have a three-minute
video and you really want to (Start: 811.269s, Duration: 4.51s) 
embed 30 seconds in the middle
of the video, you could use (Start: 815.779s, Duration: 1.881s) 
those two tags to do it. (Start: 817.66s, Duration: 1.159s) 
As soon as playback reaches
the end tag, playback will (Start: 818.819s, Duration: 4.36s) 
effectively stop. (Start: 823.179s, Duration: 1.64s) 
So that could be useful. (Start: 824.819s, Duration: 2.33s) 
fs parameter-- (Start: 827.149s, Duration: 1.94s) 
not super useful anymore. (Start: 829.089s, Duration: 1.43s) 
Basically, it lets you control
whether there is a full-screen (Start: 830.519s, Duration: 3.831s) 
button on the ActionScript
3.0 player. (Start: 834.35s, Duration: 2.58s) 
But I don't think it has an
effect on the HTML5 player. (Start: 836.93s, Duration: 3.089s) 
So not really sure why you would
want to change that. (Start: 840.019s, Duration: 4.6s) 
iv_load_policy is something that
controls whether, I guess (Start: 844.619s, Duration: 3.37s) 
interactive video
annotations-- (Start: 847.989s, Duration: 3.4s) 
for lack of a better way of
describing it-- is shown on (Start: 851.389s, Duration: 2.74s) 
your video by default. (Start: 854.129s, Duration: 2.5s) 
So there's a couple of different
values over here. (Start: 856.629s, Duration: 1.75s) 
You use 1 or 3. (Start: 858.379s, Duration: 1.69s) 
Basically, setting at 1 will
make sure that those (Start: 860.069s, Duration: 2.411s) 
annotations are shown. (Start: 862.48s, Duration: 1.349s) 
Setting it to 3 will make
sure that they're (Start: 863.829s, Duration: 1.13s) 
not shown by default. (Start: 864.959s, Duration: 1.391s) 
But at any point, the user can
change the setting explicitly (Start: 866.35s, Duration: 3.449s) 
in the player, if they want to
show or hide the annotations. (Start: 869.799s, Duration: 4.901s) 
List is a really interesting
one. (Start: 874.7s, Duration: 1.389s) 
And there is quite a bit to
talk about with list. (Start: 876.089s, Duration: 2.911s) 
So I'm actually going to defer
at this point to a whole blog (Start: 879.0s, Duration: 3.79s) 
post that we put together to
talk about the different types (Start: 882.79s, Duration: 3.87s) 
of values that the list
parameter and the listType (Start: 886.66s, Duration: 4.46s) 
parameter, which is
an associated (Start: 891.12s, Duration: 1.899s) 
parameter, can take. (Start: 893.019s, Duration: 1.0s) 
I'll link to this blog post in
the video annotations, so you (Start: 894.019s, Duration: 2.75s) 
can read it in more detail. (Start: 896.769s, Duration: 1.331s) 
But the long and short of it is
that it's a really easy way (Start: 898.1s, Duration: 3.229s) 
to take a simple embedded player
on your page and use (Start: 901.329s, Duration: 4.36s) 
that to display a list of videos
without having to hard (Start: 905.689s, Duration: 3.33s) 
code the video IDs in advance. (Start: 909.019s, Duration: 2.681s) 
So you could have one specific
player on your page and say, (Start: 911.7s, Duration: 3.069s) 
play back the most recent videos
from a specific YouTube (Start: 914.769s, Duration: 3.031s) 
channel or specific playlist or
specific search term, even. (Start: 917.8s, Duration: 5.659s) 
So you could say, this is an
embedded player that will show (Start: 923.459s, Duration: 3.34s) 
the latest videos that
match the search (Start: 926.799s, Duration: 2.22s) 
from the YouTube API. (Start: 929.019s, Duration: 1.76s) 
Something along those lines. (Start: 930.779s, Duration: 2.05s) 
It's quite useful. (Start: 932.829s, Duration: 1.11s) 
I don't think as many people
know about it as they should. (Start: 933.939s, Duration: 2.64s) 
So hopefully people will watch
this and start using it a (Start: 936.579s, Duration: 2.42s) 
little bit more. (Start: 938.999s, Duration: 1.5s) 
listType goes hand in hand
with the list parameter. (Start: 940.499s, Duration: 2.911s) 
There is a loop parameter. (Start: 943.41s, Duration: 2.429s) 
And the loop parameter will-- (Start: 945.839s, Duration: 3.25s) 
as explained in the
documentation-- (Start: 949.089s, Duration: 2.511s) 
allow you to automatically
restart playback of a video (Start: 951.6s, Duration: 3.949s) 
when the playback has ended. (Start: 955.549s, Duration: 2.061s) 
You have to have a little bit of
a hack, if you're trying to (Start: 957.61s, Duration: 2.501s) 
do this for a single video,
where you create a playlist (Start: 960.111s, Duration: 1.989s) 
that has only one video
entry in it. (Start: 962.1s, Duration: 2.29s) 
So we have a little bit
more info there. (Start: 964.39s, Duration: 2.389s) 
modestbranding is something
that's covered in a different (Start: 966.779s, Duration: 3.131s) 
blog post, which we will also
link to from the annotation. (Start: 969.91s, Duration: 2.5s) 
And it talks about the option
down here at the bottom. (Start: 972.41s, Duration: 5.359s) 
It's not exactly a fully
logoless player. (Start: 977.769s, Duration: 2.76s) 
There still is a YouTube logo
involved that shows, I think, (Start: 980.529s, Duration: 4.56s) 
on the pause screen in the upper
right-hand corner, or in (Start: 985.089s, Duration: 2.78s) 
the queued screen. (Start: 987.869s, Duration: 1.71s) 
But it is one parameter that you
could set to tone down the (Start: 989.579s, Duration: 4.17s) 
YouTube branding
on the player. (Start: 993.749s, Duration: 2.95s) 
And that's something that you
might want to keep in mind if (Start: 996.699s, Duration: 4.171s) 
you have a scenario where you
want to embed, but don't want (Start: 1000.87s, Duration: 2.949s) 
to make it fully YouTubed. (Start: 1003.819s, Duration: 3.531s) 
The origin parameter is
something that can be used (Start: 1007.35s, Duration: 4.209s) 
when you are using the iframe
embed tag, and you're going to (Start: 1011.559s, Duration: 3.851s) 
be interacting with the iframe
embed using JavaScript. (Start: 1015.41s, Duration: 4.889s) 
So as mentioned before, you
might want to explicitly put (Start: 1020.299s, Duration: 2.21s) 
in enablejsapi. (Start: 1022.509s, Duration: 1.31s) 
You also might want to
put in the origin (Start: 1023.819s, Duration: 2.951s) 
parameter over here. (Start: 1026.77s, Duration: 1.6s) 
And you set it equal to the full
URL for your web page. (Start: 1028.37s, Duration: 4.53s) 
And this is a security mechanism
to make sure that (Start: 1032.9s, Duration: 4.419s) 
only JavaScript that's run from
your host web page is (Start: 1037.319s, Duration: 2.75s) 
able to talk to the player. (Start: 1040.069s, Duration: 3.1s) 
And if you're using the YT. (Start: 1043.169s, Duration: 1.79s) 
Player constructor, it gets
set automatically for you. (Start: 1044.959s, Duration: 2.311s) 
So this is another instance
where you really only have to (Start: 1047.27s, Duration: 2.279s) 
worry about this when you're
explicitly writing out an (Start: 1049.549s, Duration: 2.85s) 
iframe tag. (Start: 1052.399s, Duration: 2.491s) 
And sometimes people run into
issues where they explicitly (Start: 1054.89s, Duration: 3.33s) 
were using the iframe tag, and
they're trying to talk to it (Start: 1058.22s, Duration: 3.02s) 
using JavaScript, but their
code just isn't working. (Start: 1061.24s, Duration: 3.98s) 
One thing to debug in that case
is check to see whether (Start: 1065.22s, Duration: 2.449s) 
you are setting the
origin parameter. (Start: 1067.669s, Duration: 1.841s) 
And if you are, make sure that
it's really set to the full (Start: 1069.51s, Duration: 4.31s) 
URL of the host name
for your site. (Start: 1073.82s, Duration: 3.9s) 
playerapiid-- (Start: 1077.72s, Duration: 1.97s) 
this isn't really relevant
anymore. (Start: 1079.69s, Duration: 2.08s) 
It's more of a way of using the
older JavaScript API for (Start: 1081.77s, Duration: 3.119s) 
identifying your player. (Start: 1084.889s, Duration: 1.721s) 
There's a playlist parameter
which is easily confused with (Start: 1086.61s, Duration: 3.809s) 
the list parameter. (Start: 1090.419s, Duration: 1.0s) 
And it is something that
actually takes in a different (Start: 1091.419s, Duration: 2.47s) 
set of values. (Start: 1093.889s, Duration: 1.0s) 
The playlist parameter takes
in a list of video IDs. (Start: 1094.889s, Duration: 3.851s) 
So this does not have to
be a real playlist, a (Start: 1098.74s, Duration: 1.769s) 
[? list that ?] exists
on YouTube. (Start: 1100.509s, Duration: 1.311s) 
It doesn't have to be anything
that uploads (Start: 1101.82s, Duration: 4.5s) 
from a specific channel. (Start: 1106.32s, Duration: 1.489s) 
It could just be a list of any
video IDs that you want. (Start: 1107.809s, Duration: 2.881s) 
And it's a way of generating a
dynamic, on-the-fly playlist. (Start: 1110.69s, Duration: 4.9s) 
So some use cases where
that might be useful. (Start: 1115.59s, Duration: 3.5s) 
There's the rel parameter. (Start: 1119.09s, Duration: 2.679s) 
And this controls whether or not
the end screen of a video (Start: 1121.769s, Duration: 4.0s) 
will display related
videos or not. (Start: 1125.769s, Duration: 3.431s) 
Most folks are familiar with the
fact that once you reach (Start: 1129.2s, Duration: 2.09s) 
the end of a YouTube video,
you'll see some configuration (Start: 1131.29s, Duration: 4.33s) 
of thumbnails with suggestions
for other videos to play. (Start: 1135.62s, Duration: 3.429s) 
We do have the ability to turn
that off if you feel like you (Start: 1139.049s, Duration: 2.801s) 
do not want that
on your embeds. (Start: 1141.85s, Duration: 4.329s) 
showinfo is something that will
control what is displayed (Start: 1146.179s, Duration: 6.49s) 
initially in the
queued states. (Start: 1152.669s, Duration: 2.6s) 
There's ways of taking the
default behavior and kind of (Start: 1155.269s, Duration: 2.871s) 
toning it down a bit, again,
where you don't see quite as (Start: 1158.14s, Duration: 1.97s) 
much before the video starts. (Start: 1160.11s, Duration: 3.27s) 
And you can set it to
show info equal (Start: 1163.38s, Duration: 1.76s) 
0, if you want that. (Start: 1165.14s, Duration: 1.99s) 
showinfo's actually used
in another case. (Start: 1167.13s, Duration: 2.23s) 
And that's when you're using
the list player. (Start: 1169.36s, Duration: 2.61s) 
And explicitly setting showinfo
equal to 1 will make (Start: 1171.97s, Duration: 4.669s) 
it so that there is a list of
queued videos in the playlist (Start: 1176.639s, Duration: 4.611s) 
in your list player. (Start: 1181.25s, Duration: 1.32s) 
So if we look over here,
this is a case where (Start: 1182.57s, Duration: 1.609s) 
showinfo is set to 1. (Start: 1184.179s, Duration: 3.151s) 
This is a playlist player that's
loading everything from (Start: 1187.33s, Duration: 1.91s) 
Google Developers. (Start: 1189.24s, Duration: 1.5s) 
And you'll see, before playback
has even started, you (Start: 1190.74s, Duration: 2.189s) 
have this handy thumbnail for
all the videos that are queued (Start: 1192.929s, Duration: 3.47s) 
up in the playlist for
the next videos. (Start: 1196.399s, Duration: 1.87s) 
It will let you choose what
you want to start with. (Start: 1198.269s, Duration: 2.701s) 
So it is actually quite useful
for scenarios where you're (Start: 1200.97s, Duration: 3.49s) 
doing the list player. (Start: 1204.46s, Duration: 4.199s) 
Start parameter we really
covered before, hand in hand (Start: 1208.659s, Duration: 3.911s) 
with the end parameter. (Start: 1212.57s, Duration: 1.89s) 
And the last one is the
theme parameter. (Start: 1214.46s, Duration: 2.9s) 
This is something similar to
that earlier color parameter (Start: 1217.36s, Duration: 1.949s) 
that just lets you change the
default way that the player (Start: 1219.309s, Duration: 3.901s) 
looks and gives you some degree
of customization in (Start: 1223.21s, Duration: 3.4s) 
that regard. (Start: 1226.61s, Duration: 2.659s) 
There are now a couple of
deprecated parameters. (Start: 1229.269s, Duration: 2.77s) 
I'm not going to cover those. (Start: 1232.039s, Duration: 1.261s) 
They're deprecated
for a reason. (Start: 1233.3s, Duration: 1.359s) 
We don't want folks using
them anymore. (Start: 1234.659s, Duration: 1.761s) 
I wanted to point out that
there are occasionally-- (Start: 1236.42s, Duration: 4.07s) 
I don't want to say rumors--
but certain parameters out (Start: 1240.49s, Duration: 3.819s) 
there that people pass around
and say, hey, you can use this (Start: 1244.309s, Duration: 2.661s) 
player parameter to force HTML5
playback, or use this (Start: 1246.97s, Duration: 4.169s) 
player parameter to force
playback in a certain quality (Start: 1251.139s, Duration: 2.62s) 
level or something along
those lines. (Start: 1253.759s, Duration: 2.55s) 
Those are undocumented
for a reason. (Start: 1256.309s, Duration: 2.09s) 
We really do not want people to
use parameters that aren't (Start: 1258.399s, Duration: 3.581s) 
explicitly mentioned in the
documentation, partly because (Start: 1261.98s, Duration: 2.34s) 
we're not fully committed
to supporting them. (Start: 1264.32s, Duration: 2.209s) 
They might sometimes work in
some cases, and they might (Start: 1266.529s, Duration: 3.971s) 
stop working at any time
in the future. (Start: 1270.5s, Duration: 1.809s) 
So we really don't want people
to build things that rely on (Start: 1272.309s, Duration: 2.781s) 
those parameters. (Start: 1275.09s, Duration: 2.1s) 
And there's also just cases
where we want control to be in (Start: 1277.19s, Duration: 4.88s) 
the hands of the person who's
viewing the embed. (Start: 1282.07s, Duration: 3.37s) 
So we want control over the
default playback to really lie (Start: 1285.44s, Duration: 5.26s) 
in the person who's using the
web browser and might have (Start: 1290.7s, Duration: 3.14s) 
Flash enabled. (Start: 1293.84s, Duration: 2.03s) 
Or the default auto quality for
the quality level in many (Start: 1295.87s, Duration: 5.299s) 
cases gives the best playback
experience. (Start: 1301.169s, Duration: 3.0s) 
So if you don't see something
listed as a supported (Start: 1304.169s, Duration: 3.591s) 
parameter, please
don't use it. (Start: 1307.76s, Duration: 1.39s) 
And if you do happen to find
some parameters, please don't (Start: 1309.15s, Duration: 3.499s) 
complain if they ever break at
some point in the future. (Start: 1312.649s, Duration: 3.301s) 
I guess that's the
main takeaway. (Start: 1315.95s, Duration: 3.06s) 
That covers the list of all
the supported parameters. (Start: 1319.01s, Duration: 2.44s) 
We had a lot of different
web material here. (Start: 1321.45s, Duration: 2.719s) 
And be sure to check out the
annotations on the video for (Start: 1324.169s, Duration: 1.951s) 
links to everything that
we covered today. (Start: 1326.12s, Duration: 3.13s) 
Thanks very much for watching. (Start: 1329.25s, Duration: 3.799s) 
And we'll see everybody
next week. (Start: 1333.049s, Duration: 4.26s) 
Cheers. (Start: 1337.309s, Duration: 3.33s) 
